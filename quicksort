/*
快速排序1（算法只交换节点的val值，平均时间复杂度O（nlogn）,不考虑递归栈空间的话空间复杂度是O（1））
这里我们还需要注意的一点是数组的partition两个参数分别代表数组的起始位置，两边都是闭区间
对左边子数组排序时，子数组右边界是middle-1，如果链表也按这种两边都是闭区间的话，找到分割后枢纽元middle，
找到middle-1还得再次遍历数组，因此链表的partition采用前闭后开的区间（这样排序主函数也需要前闭后开区间），这样就可以避免上述问题
*/
class Solution {
public:
    ListNode *quickSortList(ListNode *head) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        //链表快速排序
        if(head == NULL || head->next == NULL)return head;
        qsortList(head, NULL);
        return head;
    }
    void qsortList(ListNode*head, ListNode*tail)
    {
        //链表范围是[low, high)
        if(head != tail && head->next != tail)  //注意这里是开区间
        {
            ListNode* mid = partitionList(head, tail);
            qsortList(head, mid);
            qsortList(mid->next, tail);
        }
    }
    ListNode* partitionList(ListNode*low, ListNode*high)
    {
        //链表范围是[low, high)
        int key = low->val;
        ListNode* loc = low;
        //local指针的下一个元素就是大于枢纽的节点，而i跟踪的是所有的节点，当在几个大于枢纽的节点后出现小于枢纽的元素时
        //就要把小于枢纽的元素换到loc的下一个节点上
        //最后loc会停在最后一个小于枢纽的节点上
        for(ListNode*i = low->next; i != high; i = i->next)
            if(i->val < key)
            {
                loc = loc->next;
                swap(i->val, loc->val);
            }
        swap(loc->val, low->val);
        return loc;
    }
};
